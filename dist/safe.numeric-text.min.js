!function(e){function n(e,n){function r(r,a,t,o){function u(e){e=e||0;var n=new RegExp("[\\,\\"+v.currencySymbol+"]","g");return e.toString().replace(n,"")}function i(e,n){throw{Error:e,Message:n}}function l(e){n(function(){e=e||y.val(),o.$setViewValue(e),o.$render()})}function c(e){var n=v.format;e=u(e),y.val(m(n,e)),l()}function m(n,r){return r=r||0,"decimal"==n?e("number")(r,v.decimalPlaces):"int"==n?e("number")(r):"currency"==n||"percentage"==n?e("currency")(r,v.currencySymbol,v.decimalPlaces):void 0}function s(){var e=y.val()||0;""===y.val()&&(e=v.minValue>0?v.minValue:0);var n=v.format;return"decimal"==n?parseFloat(u(e)):"int"==n?parseInt(u(e)):"currency"==n||"percentage"==n?parseFloat(u(e)):void 0}function f(e,n){n.preventDefault(),e>=v.minValue&&e<=v.maxValue?c(e):(e<v.minValue&&(e=m(v.format,v.minValue==Number.NEGATIVE_INFINITY?0:v.minValue)),e>v.maxValue&&(e=m(v.format,v.maxValue)),c(e),d())}function d(){y.addClass(v.errorClass),y.attr("valida-control",!1)}function p(){y.removeClass(v.errorClass),y.attr("valida-control",!0)}var v={format:t.format||"int",decimalPlaces:t.decimalPlaces||2,step:parseFloat(t.step)||0,maxValue:t.maxValue||Number.POSITIVE_INFINITY,minValue:t.minValue||Number.NEGATIVE_INFINITY,currencySymbol:t.currencySymbol||"$",errorClass:t.errorClass||"has-error RequiredField"};"percentage"==v.format&&(v.currencySymbol="%"),"int"!==v.format&&"decimal"!==v.format&&"currency"!==v.format&&"percentage"!==v.format&&i("Invalid Format",'Format "'+v.format+'" is an invalid format for numeric-text, numeric-text only accepts the following formats, \n "int" || "decimal" || "currency" || "percentage"'),v.step<0&&i("Step should not be negative","The step number should be 0 or a positive number"),"number"!=typeof v.step&&i("Step value is not a number",'The value "'+v.step+'" in step is not a number, shoud be a number greater than 0'),v.decimalPlaces<0&&i("DecimalPlaces should not be negative",'The value "" in decimal-places is less then 0, should be a positive number');var y=$(a),b=0,V=/[0-9]/;y.unbind("keydown"),y.on("keydown",function(e){return 0!==v.step&&"number"==typeof v.step&&(38==e.keyCode?(b=s(),b+=v.step,f(b,e)):40==e.keyCode&&(b=s(),b-=v.step,f(b,e))),189==e.keyCode?void f(s()*-1,e):190==e.keyCode&&"int"!=v.format?void(y.val().indexOf(".")!==-1&&e.preventDefault()):void(e.shiftKey===!1?V.test(String.fromCharCode(e.keyCode))||8!=e.keyCode&&37!=e.keyCode&&39!=e.keyCode&&e.preventDefault():e.preventDefault())}),y.unbind("keyup"),y.unbind("change"),y.on("change",function(e){f(s(),e),p()}),y.unbind("focus"),y.on("focus",function(e){setTimeout(function(e){var n=e.value.length;return function(){void 0!==e.setSelectionRange?e.setSelectionRange(n,n):$(e).val(e.value)}}(this),0)}),y.on("keyup",function(e){p()}),y.css("text-align","right"),o.$parsers.push(function(e){return u(e)}),o.$formatters.push(function(e){return e>=v.minValue&&e<=v.maxValue?(l(m(v.format,e)),m(v.format,e)):(e<v.minValue&&(e=m(v.format,v.minValue==Number.NEGATIVE_INFINITY?0:v.minValue)),e>v.maxValue&&(e=m(v.format,v.maxValue)),l(e),m(v.format,e))})}return{restrict:"A",link:r,require:"ngModel"}}e.module("safe.numeric-text",[]).directive("numericText",n),n.$inject=["$filter","$timeout"]}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
